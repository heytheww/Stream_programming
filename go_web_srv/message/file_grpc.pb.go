// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: file.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	C2S(ctx context.Context, opts ...grpc.CallOption) (RPC_C2SClient, error)
	S2C(ctx context.Context, in *S2CRequest, opts ...grpc.CallOption) (RPC_S2CClient, error)
	CS(ctx context.Context, opts ...grpc.CallOption) (RPC_CSClient, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) C2S(ctx context.Context, opts ...grpc.CallOption) (RPC_C2SClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPC_ServiceDesc.Streams[0], "/message.RPC/C2S", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCC2SClient{stream}
	return x, nil
}

type RPC_C2SClient interface {
	Send(*C2SRequest) error
	CloseAndRecv() (*C2SResponse, error)
	grpc.ClientStream
}

type rPCC2SClient struct {
	grpc.ClientStream
}

func (x *rPCC2SClient) Send(m *C2SRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCC2SClient) CloseAndRecv() (*C2SResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(C2SResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) S2C(ctx context.Context, in *S2CRequest, opts ...grpc.CallOption) (RPC_S2CClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPC_ServiceDesc.Streams[1], "/message.RPC/S2C", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCS2CClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_S2CClient interface {
	Recv() (*S2CResponse, error)
	grpc.ClientStream
}

type rPCS2CClient struct {
	grpc.ClientStream
}

func (x *rPCS2CClient) Recv() (*S2CResponse, error) {
	m := new(S2CResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) CS(ctx context.Context, opts ...grpc.CallOption) (RPC_CSClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPC_ServiceDesc.Streams[2], "/message.RPC/CS", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCCSClient{stream}
	return x, nil
}

type RPC_CSClient interface {
	Send(*CSRequest) error
	Recv() (*CSResponse, error)
	grpc.ClientStream
}

type rPCCSClient struct {
	grpc.ClientStream
}

func (x *rPCCSClient) Send(m *CSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCCSClient) Recv() (*CSResponse, error) {
	m := new(CSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	C2S(RPC_C2SServer) error
	S2C(*S2CRequest, RPC_S2CServer) error
	CS(RPC_CSServer) error
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) C2S(RPC_C2SServer) error {
	return status.Errorf(codes.Unimplemented, "method C2S not implemented")
}
func (UnimplementedRPCServer) S2C(*S2CRequest, RPC_S2CServer) error {
	return status.Errorf(codes.Unimplemented, "method S2C not implemented")
}
func (UnimplementedRPCServer) CS(RPC_CSServer) error {
	return status.Errorf(codes.Unimplemented, "method CS not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_C2S_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).C2S(&rPCC2SServer{stream})
}

type RPC_C2SServer interface {
	SendAndClose(*C2SResponse) error
	Recv() (*C2SRequest, error)
	grpc.ServerStream
}

type rPCC2SServer struct {
	grpc.ServerStream
}

func (x *rPCC2SServer) SendAndClose(m *C2SResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCC2SServer) Recv() (*C2SRequest, error) {
	m := new(C2SRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RPC_S2C_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(S2CRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).S2C(m, &rPCS2CServer{stream})
}

type RPC_S2CServer interface {
	Send(*S2CResponse) error
	grpc.ServerStream
}

type rPCS2CServer struct {
	grpc.ServerStream
}

func (x *rPCS2CServer) Send(m *S2CResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RPC_CS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).CS(&rPCCSServer{stream})
}

type RPC_CSServer interface {
	Send(*CSResponse) error
	Recv() (*CSRequest, error)
	grpc.ServerStream
}

type rPCCSServer struct {
	grpc.ServerStream
}

func (x *rPCCSServer) Send(m *CSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCCSServer) Recv() (*CSRequest, error) {
	m := new(CSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "C2S",
			Handler:       _RPC_C2S_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "S2C",
			Handler:       _RPC_S2C_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CS",
			Handler:       _RPC_CS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "file.proto",
}
